fun back(x) {
    return(at(x, length(x)-1));
};

fun front(x) {
    if (length(x) == 0) {
        return("");
    };
    return(at(x, 0));
};

fun replace(base_string, num, end) {
    if (is_string(base_string) and is_number(num)) {
        assert(num >= 0, num < length(base_string));
        final = "";
        placement = 0;

        condition = eval(placement != num);
        while (condition) {
            final += at(base_string, placement);
            placement++;
            condition = eval(placement != num);
        };

        final += end;
        placement++;

        condition = eval(placement < length(base_string));
        while (condition) {
            final += at(base_string, placement);
            placement++;
            condition = eval(placement < length(base_string));
        };
        return(final);
    } else {
        fprint("is_string(base_string, param 1): " + is_string(base_string));
        fprint("is_number(num, param 2): " + is_number(num));
        throw("Bad input.");
    };
};

fun substr(base_string, begin, end) {
    assert(is_string(base_string), is_number(begin), is_number(end));
    assert(begin > -1, end < length(base_string), begin < end);
    final = "";
    position = begin;
    while (position != end) {
        final += at(base_string, position);
        position++;
    };
    return (final);
};